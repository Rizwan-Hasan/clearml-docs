# This is a basic workflow to help you get started with Actions

name: Links

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]
  #schedule:
  #  - cron: "00 18 * * *"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  FindingAllFiles:
    runs-on: ubuntu-latest
    env:
      MD_ARTIFACTS_DIR: /tmp/md_artifacts
    steps:
      - uses: actions/checkout@v3

      - name: Creating artifacts directory
        id: create_artifacts_dir
        run: mkdir -pv "$MD_ARTIFACTS_DIR"

      - name: Find all markdown files
        id: find_md_files
        run: |
          export md_files_arr=($(find . -name '*.md' -type f | sed 's|^./||'))
          echo "${md_files_arr}" > "${MD_ARTIFACTS_DIR}/MD_FILES.txt"
          echo "${md_files_arr[@]:0:50}" | tr ' ' '\n' > "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_1.txt"
          echo "${md_files_arr[@]:50:50}" | tr ' ' '\n' > "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_2.txt"
          echo "${md_files_arr[@]:100:50}" | tr ' ' '\n' > "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_3.txt"
          echo "${md_files_arr[@]:150:50}" | tr ' ' '\n' > "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_4.txt"
          echo "${md_files_arr[@]:200}" | tr ' ' '\n' > "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_5.txt"

      - uses: actions/upload-artifact@v3
        with:
          name: artifacts-markdown
          path: ${{ env.MD_ARTIFACTS_DIR }}

  LinkChecker:
    runs-on: ubuntu-latest
    needs: [FindingAllFiles]
    env:
      MD_ARTIFACTS_DIR: /tmp/md_artifacts
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: artifacts-markdown
          path: ${{ env.MD_ARTIFACTS_DIR }}

      - name: Creating all MD_FILES env variable
        run: |
          echo "MD_FILES=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES.txt" | tr '\n' ' ')" >> $GITHUB_ENV
          echo "MD_FILES_BATCH_1=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_1.txt" | tr '\n' ' ')" >> $GITHUB_ENV
          echo "MD_FILES_BATCH_2=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_2.txt" | tr '\n' ' ')" >> $GITHUB_ENV
          echo "MD_FILES_BATCH_3=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_3.txt" | tr '\n' ' ')" >> $GITHUB_ENV
          echo "MD_FILES_BATCH_4=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_4.txt" | tr '\n' ' ')" >> $GITHUB_ENV
          echo "MD_FILES_BATCH_5=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_5.txt" | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Link Checker (Batch 1)
        id: lychee_batch_1
        # if: ${{ false }}  # disable for now
        uses: lycheeverse/lychee-action@v1.5.1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # Fail action on broken links
          # fail: true
          # Use json as output format (instead of markdown)
          # format: json
          args: ${{ env.MD_FILES_BATCH_1 }} --max-concurrency 1 --no-progress --verbose

      - name: Link Checker (Batch 2)
        id: lychee_batch_2
        # if: ${{ false }}  # disable for now
        uses: lycheeverse/lychee-action@v1.5.1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # Fail action on broken links
          # fail: true
          # Use json as output format (instead of markdown)
          # format: json
          args: ${{ env.MD_FILES_BATCH_2 }} --max-concurrency 1 --no-progress --verbose

      - name: Link Checker (Batch 3)
        id: lychee_batch_3
        # if: ${{ false }}  # disable for now
        uses: lycheeverse/lychee-action@v1.5.1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # Fail action on broken links
          # fail: true
          # Use json as output format (instead of markdown)
          # format: json
          args: ${{ env.MD_FILES_BATCH_3 }} --max-concurrency 1 --no-progress --verbose

      - name: Link Checker (Batch 4)
        id: lychee_batch_4
        # if: ${{ false }}  # disable for now
        uses: lycheeverse/lychee-action@v1.5.1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # Fail action on broken links
          # fail: true
          # Use json as output format (instead of markdown)
          # format: json
          args: ${{ env.MD_FILES_BATCH_4 }} --max-concurrency 1 --no-progress --verbose

      - name: Link Checker (Batch 5)
        id: lychee_batch_5
        # if: ${{ false }}  # disable for now
        uses: lycheeverse/lychee-action@v1.5.1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # Fail action on broken links
          # fail: true
          # Use json as output format (instead of markdown)
          # format: json
          args: ${{ env.MD_FILES_BATCH_5 }} --max-concurrency 1 --no-progress --verbose

  LinkCheckerExcluded:
    runs-on: ubuntu-latest
    needs: [FindingAllFiles]
    env:
      MD_ARTIFACTS_DIR: /tmp/md_artifacts
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: artifacts-markdown
          path: ${{ env.MD_ARTIFACTS_DIR }}

      - name: Creating all MD_FILES env variable
        run: |
          echo "MD_FILES=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES.txt" | tr '\n' ' ')" >> $GITHUB_ENV
          echo "MD_FILES_BATCH_1=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_1.txt" | tr '\n' ' ')" >> $GITHUB_ENV
          echo "MD_FILES_BATCH_2=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_2.txt" | tr '\n' ' ')" >> $GITHUB_ENV
          echo "MD_FILES_BATCH_3=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_3.txt" | tr '\n' ' ')" >> $GITHUB_ENV
          echo "MD_FILES_BATCH_4=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_4.txt" | tr '\n' ' ')" >> $GITHUB_ENV
          echo "MD_FILES_BATCH_5=$(cat "${MD_ARTIFACTS_DIR}/MD_FILES_BATCH_5.txt" | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Creating lychee include file
        run: cp -vf .lycheeignore /tmp/lychee_include_file

      - name: Removing .lycheeignore
        run: rm -vf .lycheeignore

      - name: Link Checker (Batch 1)
        id: lychee_batch_1
        # if: ${{ false }}  # disable for now
        uses: lycheeverse/lychee-action@v1.5.1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # Fail action on broken links
          # fail: true
          # Use json as output format (instead of markdown)
          # format: json
          args: ${{ env.MD_FILES_BATCH_1 }} --max-concurrency 1 --no-progress --verbose --include $(cat /tmp/lychee_include_file | tr '\n' ' ')

      - name: Link Checker (Batch 2)
        id: lychee_batch_2
        # if: ${{ false }}  # disable for now
        uses: lycheeverse/lychee-action@v1.5.1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # Fail action on broken links
          # fail: true
          # Use json as output format (instead of markdown)
          # format: json
          args: ${{ env.MD_FILES_BATCH_2 }} --max-concurrency 1 --no-progress --verbose --include $(cat /tmp/lychee_include_file | tr '\n' ' ')

      - name: Link Checker (Batch 3)
        id: lychee_batch_3
        # if: ${{ false }}  # disable for now
        uses: lycheeverse/lychee-action@v1.5.1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # Fail action on broken links
          # fail: true
          # Use json as output format (instead of markdown)
          # format: json
          args: ${{ env.MD_FILES_BATCH_3 }} --max-concurrency 1 --no-progress --verbose --include $(cat /tmp/lychee_include_file | tr '\n' ' ')

      - name: Link Checker (Batch 4)
        id: lychee_batch_4
        # if: ${{ false }}  # disable for now
        uses: lycheeverse/lychee-action@v1.5.1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # Fail action on broken links
          # fail: true
          # Use json as output format (instead of markdown)
          # format: json
          args: ${{ env.MD_FILES_BATCH_4 }} --max-concurrency 1 --no-progress --verbose --include $(cat /tmp/lychee_include_file | tr '\n' ' ')

      - name: Link Checker (Batch 5)
        id: lychee_batch_5
        # if: ${{ false }}  # disable for now
        uses: lycheeverse/lychee-action@v1.5.1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # Fail action on broken links
          # fail: true
          # Use json as output format (instead of markdown)
          # format: json
          args: ${{ env.MD_FILES_BATCH_5 }} --max-concurrency 1 --no-progress --verbose --include $(cat /tmp/lychee_include_file | tr '\n' ' ')

      #- name: Read Results
      #  if: ${{ steps.lychee.outputs.exit_code != 0 }}
      #  run: echo "FAILED_URLS=$(jq -r '.fail_map[] | .[] | .url' ./lychee/out.md)" >> $GITHUB_ENV

      #- name: Slack Notification
      #  if: ${{ steps.lychee.outputs.exit_code != 0 }}
      #  uses: tokorom/action-slack-incoming-webhook@main
      #  env:
      #    INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      #  with:
      #    blocks: |
      #      [
      #        {"type": "section", "text": {"type": "mrkdwn", "text": ":warning: Link Checker failure in github.com/allegroai/clearml-docs "}},
      #        {"type": "section", "text": {"type": "mrkdwn", "text": "$FAILED_URLS"}}
      #      ]